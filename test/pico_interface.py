#!/usr/bin/env python3

from enum import Enum, unique
from typing import TypeVar


DELIM: str = " "
END: str = "\n"

uint32 = int
uint8 = int
string = str

M = TypeVar("M", bound="Message")


class Message:
    class MESSAGE_TYPE(Enum):
        COMMAND = 1
        STATUS = 2

    name: str = ""
    id: str = ""

    _fields: list = []

    def pack(self, msg_type: MESSAGE_TYPE) -> bytes:
        msg: str = f"{self.id}"
        if msg_type is Message.MESSAGE_TYPE.COMMAND:
            msg += ".C"
        elif msg_type is Message.MESSAGE_TYPE.STATUS:
            msg += ".S"
        else:
            raise Exception("Invalid message type.")

        for field in self._fields:
            val: str = str(getattr(self, field[0]))
            msg += f"{DELIM}{val}"
        msg += END

        return bytes(msg, encoding="utf-8")

    @classmethod
    def unpack(cls: type[M], data: bytes) -> M:
        decoded: str = data.decode(encoding="utf-8").rstrip()
        split: list[str] = decoded.split(DELIM)

        # Strip the ID out, if it's there.
        if cls.id in split[0]:
            split = split[1:]

        constructor_params: dict = {}
        for idx, field in enumerate(split):
            field_name: str = cls._fields[idx][0]
            field_type: type = cls._fields[idx][1]

            if issubclass(field_type, Enum):
                field = int(field)

            field_value = field_type(field)

            constructor_params[field_name] = field_value

        message: Message = cls(**constructor_params)
        return message


class Heartbeat(Message):
    """Heartbeat message. Autogenerated on 2025-03-07 16:49:20.575430"""

    name: str = "Heartbeat"
    id: str = "$HBT"

    _fields: list = [
        ("seq", uint32),
    ]

    def __init__(
        self,
        seq: uint32,
    ) -> None:

        self.seq = seq


class Ack(Message):
    """Ack message. Autogenerated on 2025-03-07 16:49:20.575430"""

    @unique
    class STATUS(Enum):
        SUCCESS = 0
        FAILURE = 1

        def __str__(self) -> str:
            return str(self.value)

    name: str = "Ack"
    id: str = "$ACK"

    _fields: list = [
        ("header", string),
        ("fields", string),
        ("status", STATUS),
    ]

    def __init__(
        self,
        header: string,
        fields: string,
        status: STATUS,
    ) -> None:

        self.header = header
        self.fields = fields
        self.status = status


class SystemState(Message):
    """SystemState message. Autogenerated on 2025-03-07 16:49:20.575430"""

    @unique
    class STATE(Enum):
        STANDBY = 0
        ESTOP = 1
        ERROR = 2
        READY = 3
        TEST = 4

        def __str__(self) -> str:
            return str(self.value)

    name: str = "SystemState"
    id: str = "$SYS"

    _fields: list = [
        ("state", STATE),
        ("status", string),
    ]

    def __init__(
        self,
        state: STATE,
        status: string,
    ) -> None:

        self.state = state
        self.status = status


class Motors(Message):
    """Motors message. Autogenerated on 2025-03-07 16:49:20.575430"""

    @unique
    class DIRECTION(Enum):
        FORWARD = 0
        REVERSE = 1

        def __str__(self) -> str:
            return str(self.value)

    name: str = "Motors"
    id: str = "$MTR"

    _fields: list = [
        ("motor_1_direction", DIRECTION),
        ("motor_1_pwm", uint8),
        ("motor_2_direction", DIRECTION),
        ("motor_2_pwm", uint8),
    ]

    def __init__(
        self,
        motor_1_direction: DIRECTION,
        motor_1_pwm: uint8,
        motor_2_direction: DIRECTION,
        motor_2_pwm: uint8,
    ) -> None:

        self.motor_1_direction = motor_1_direction
        self.motor_1_pwm = motor_1_pwm
        self.motor_2_direction = motor_2_direction
        self.motor_2_pwm = motor_2_pwm


class Velocity(Message):
    """Velocity message. Autogenerated on 2025-03-07 16:49:20.575430"""

    name: str = "Velocity"
    id: str = "$VEL"

    _fields: list = [
        ("motor_1_velocity", float),
        ("motor_2_velocity", float),
    ]

    def __init__(
        self,
        motor_1_velocity: float,
        motor_2_velocity: float,
    ) -> None:

        self.motor_1_velocity = motor_1_velocity
        self.motor_2_velocity = motor_2_velocity


MSG_IDS: dict[str, Message] = {
    "$HBT": Heartbeat,
    "$ACK": Ack,
    "$SYS": SystemState,
    "$MTR": Motors,
    "$VEL": Velocity,
}
